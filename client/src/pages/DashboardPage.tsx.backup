import { useState, useEffect } from 'react';
import { useWallet } from '../hooks/useWallet';
import { useI18n } from '../contexts/I18nContext';
import { useNFTVerification } from '../hooks/useNFTVerification';
import { useUserReferralStats } from '../hooks/useBeeHiveStats';
import { NFTRequiredScreen } from '../components/nfts/NFTRequiredScreen';
import { LoadingScreen } from '../components/shared/LoadingScreen';
import { ActivationScreen } from '../components/membership/ActivationScreen';
import { MembershipStatusCard } from '../components/membership/MembershipStatusCard';
import { ReferralLinkCard } from '../components/referrals/ReferralLinkCard';
import { UserStatsGrid } from '../components/dashboard/UserStatsGrid';
import { QuickActionsGrid } from '../components/dashboard/QuickActionsGrid';
import { MatrixNetworkStats } from '../components/matrix/MatrixNetworkStats';
import { Notifications } from '../components/shared/Notifications';
import { dashboardApi, type DashboardStats, type RecentActivity } from './api/dashboard/dashboard.api';
import styles from '../styles/dashboard/dashboard.module.css';

export default function DashboardPage() {
  const { 
    userData, 
    isActivated, 
    currentLevel, 
    bccBalance, 
    walletAddress,
    activateMembership,
    isActivating
  } = useWallet();
  const { t } = useI18n();
  const { hasLevel1NFT, isLoading: isCheckingNFT } = useNFTVerification();
  const { data: userStats, isLoading: isLoadingUserStats } = useUserReferralStats();
  const [timeRemaining, setTimeRemaining] = useState<number>(0);
  
  // Check registration expiration status
  useEffect(() => {
    const checkRegistrationStatus = async () => {
      if (!walletAddress || isActivated) return;
      
      const status = await dashboardApi.getStats(walletAddress);
      if (status?.registrationExpiresAt) {
        const expiresAt = new Date(status.registrationExpiresAt).getTime();
        const now = Date.now();
        setTimeRemaining(Math.max(0, expiresAt - now));
      }
    };
    
    checkRegistrationStatus();
  }, [walletAddress, isActivated]);
  
  // Countdown timer effect
  useEffect(() => {
    if (timeRemaining <= 0) return;
    
    const timer = setInterval(() => {
      setTimeRemaining(prev => {
        const newTime = prev - 1000;
        if (newTime <= 0) {
          window.location.reload();
          return 0;
        }
        return newTime;
      });
    }, 1000);
    
    return () => clearInterval(timer);
  }, [timeRemaining]);

  // Show loading screen while checking NFT
  if (isCheckingNFT) {
    return <LoadingScreen />;
  }

  // Show NFT required screen if user doesn't have Level 1 NFT
  if (!hasLevel1NFT) {
    return <NFTRequiredScreen />;
  }

  // Show activation screen if not activated
  if (!isActivated) {
    return (
      <ActivationScreen
        timeRemaining={timeRemaining}
        onActivate={activateMembership}
        isActivating={isActivating}
      />
    );
  }

  return (
    <div className={styles.dashboardContainer}>
      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-honey mb-2">
            {t('dashboard.welcome')}
          </h1>
          <p className="text-muted-foreground">
            {t('dashboard.subtitle')}
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          <div className="lg:col-span-2">
            <MembershipStatusCard 
              currentLevel={currentLevel}
              bccBalance={bccBalance}
              isLoading={isLoadingUserStats}
            />
          </div>
          <div>
            <ReferralLinkCard walletAddress={walletAddress} />
          </div>
        </div>

        <UserStatsGrid stats={userStats} isLoading={isLoadingUserStats} />
        
        <QuickActionsGrid />
        
        <MatrixNetworkStats />
        
        <Notifications />
      </div>
    </div>
  );
}