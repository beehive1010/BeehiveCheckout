'use client';


import { useState, useCallback } from "react";
import { useTranslation } from "react-i18next";
import { toast } from "react-hot-toast";
import { PayEmbed, useActiveAccount, useReadContract } from "thirdweb/react";
import { claimTo } from "thirdweb/extensions/erc1155";
import { getNFT } from "thirdweb/extensions/erc1155";
import { supabase } from "@/lib/supabase";
import { client } from "@/utils/thirdweb/client";
import { getContract, sendAndConfirmTransaction } from "thirdweb";
import { defineChain } from "thirdweb/chains";
import { FiX } from "react-icons/fi";
import type { PayEmbedProps } from "thirdweb/react";
import type { Database } from "@/types/database";
import { getApprovalForTransaction } from "thirdweb/extensions/erc20";
import { optimism } from "thirdweb/chains";
import { useQuery } from "@tanstack/react-query";


const STAR_NFT_CONTRACT = "0x31FF15aAA5CBD8Af46838c30dF141e20e1E244fe";
const USD_ADDRESS = "0x94b008aA00579c1307B0EF2c499aD98a8ce58e58";


interface ClaimStarNFTButtonProps {
  walletAddress: string;
  tokenId: number;
  nftType: Database['public']['Enums']['nft_type'];
  style?: React.CSSProperties;
  onSuccess?: () => void;
  onError?: (error: Error) => void;
  disabled?: boolean;
}


export function ClaimStarNFTButton({
  walletAddress,
  tokenId,
  nftType,
  style,
  onSuccess,
  onError,
  disabled,
}: ClaimStarNFTButtonProps) {
  const { t } = useTranslation();
  const account = useActiveAccount();
  const [isProcessing, setIsProcessing] = useState(false);
  const [showPayEmbed, setShowPayEmbed] = useState(false);
  const [isApproving, setIsApproving] = useState(false);


  // 初始化合约
  const nftContract = getContract({
    client,
    chain: defineChain(10),
    address: STAR_NFT_CONTRACT,
  });


  // 读取 NFT 元数据
  const { data: nft } = useReadContract(getNFT, {
    contract: nftContract,
    tokenId: BigInt(tokenId),
  });


  const usdtContract = getContract({
    client,
    chain: optimism,
    address: USD_ADDRESS,
  });


  // 添加 useQuery 获取 NFT 配置
  const { data: nftConfig } = useQuery({
    queryKey: ['nft-config', nftType, tokenId],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('nft_config')
        .select('price, ops_fund')
        .eq('nft_type', nftType)
        .eq('token_id', tokenId)
        .single();


      if (error) throw error;
      return data;
    }
  });


  const handleClose = () => {
    setShowPayEmbed(false);
    setIsProcessing(false);
  };


  const getMultiplier = (nftType: 'Nova' | 'Orbit' | 'Stellar' | 'Polaris'): number => {
    const multipliers = {
      'Nova': 5,
      'Orbit': 6,
      'Stellar': 7,
      'Polaris': 8
    } as const;
    return multipliers[nftType] || 1;
  };


  const handleComplete = useCallback(async (result: { hash: string }) => {
    try {
      // 直接记录 Star NFT 认领信息，不需要查询用户
      await supabase.from('star_nft_claimed').insert({
        wallet_address: walletAddress,
        token_id: tokenId,
        nft_type: nftType,
        multiplier: getMultiplier(nftType),
        ops_fund: nftConfig?.ops_fund || 0,
        price: nftConfig?.price || 0,
        claimed_at: new Date().toISOString(),
        created_at: new Date().toISOString(),
        status: 'claimed',
        updated_at: new Date().toISOString(),
        user_uuid: `${walletAddress.toLowerCase()}-${tokenId}`
      });


      toast.success(t('starNFT.claim.success'));
      onSuccess?.();
      handleClose();
    } catch (error) {
      console.error('Error recording transaction:', error);
      toast.error(t('starNFT.claim.error'));
      onError?.(error as Error);
    }
  }, [walletAddress, tokenId, nftType, t, onSuccess, onError, nftConfig]);


  const handleApproveAndClaim = async () => {
    if (!account || isApproving) return;


    try {
      setIsApproving(true);
     
      const claimTransaction = claimTo({
        contract: nftContract,
        quantity: BigInt(1),
        tokenId: BigInt(tokenId),
        to: account.address,
      });


      const approveTx = await getApprovalForTransaction({
        transaction: claimTransaction,
        account,
      });


      if (approveTx) {
        try {
          await sendAndConfirmTransaction({ account, transaction: approveTx });
          toast.success(t('starNFT.claim.approved'));
          setShowPayEmbed(true);
        } catch (error: any) {
          if (error.message?.includes('insufficient funds')) {
            toast.error(t('starNFT.claim.insufficientGas'));
          } else {
            toast.error(t('starNFT.claim.approveError'));
          }
          return;
        }
      } else {
        setShowPayEmbed(true);
      }
    } catch (error) {
      console.error('Approval error:', error);
      toast.error(t('starNFT.claim.approveError'));
      onError?.(error as Error);
    } finally {
      setIsApproving(false);
    }
  };


  if (!account) return null;


  const payEmbedProps: PayEmbedProps = {
    client,
    payOptions: {
      mode: "transaction",
      transaction: claimTo({
        contract: nftContract,
        quantity: BigInt(1),
        tokenId: BigInt(tokenId),
        to: account.address,
      }),
      metadata: nft?.metadata,
      onPurchaseSuccess: async (info: any) => {
        if (info.type === 'crypto' && info.status?.transactionHash) {
          try {
            // 直接记录 Star NFT 认领信息，不需要查询用户
            await supabase.from('star_nft_claimed').insert({
              wallet_address: walletAddress,
              token_id: tokenId,
              nft_type: nftType,
              multiplier: getMultiplier(nftType),
              ops_fund: nftConfig?.ops_fund || 0,
              price: nftConfig?.price || 0,
              claimed_at: new Date().toISOString(),
              created_at: new Date().toISOString(),
              status: 'claimed',
              updated_at: new Date().toISOString(),
              user_uuid: `${walletAddress.toLowerCase()}-${tokenId}`
            });


            toast.success(t('starNFT.claim.success'));
            onSuccess?.();
            handleClose();
          } catch (error) {
            console.error('Error recording transaction:', error);
            toast.error(t('starNFT.claim.error'));
            onError?.(error as Error);
          }
        }
      }
    },
  };


  return (
    <>
      <button
        onClick={handleApproveAndClaim}
        disabled={disabled || isApproving || isProcessing}
        className="w-full py-4 px-6 rounded-xl text-white font-medium
          bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800
          transition-colors duration-200
          shadow-lg shadow-purple-500/20
          border border-purple-400/30 backdrop-blur-sm
          disabled:opacity-50 disabled:cursor-not-allowed"
        style={style}
      >
        <div className="flex items-center justify-center gap-2">
          <span>
            {isApproving ? t('starNFT.claim.approving') :
             isProcessing ? t('common.processing') :
             t('starNFT.buttons.claim')}
          </span>
          <span className="text-xl">⭐</span>
        </div>
      </button>


      {showPayEmbed && (
        <div className="fixed inset-0 z-[9999] overflow-y-auto">
          <div className="min-h-screen px-4 text-center">
            {/* 背景遮罩 */}
            <div
              className="fixed inset-0 bg-black/80 backdrop-blur-sm transition-opacity"
              onClick={handleClose}
            />


            {/* 居中技巧 */}
            <span
              className="inline-block h-screen align-middle"
              aria-hidden="true"
            >
              &#8203;
            </span>


            {/* 弹窗内容 */}
            <div className="inline-block w-full max-w-[500px] min-h-[600px] max-h-[80vh] my-8 align-middle transition-all transform bg-black rounded-2xl relative">
              {/* 关闭按钮 */}
              <button
                onClick={handleClose}
                className="absolute top-4 right-4 text-gray-400 hover:text-white p-2 rounded-full hover:bg-white/10 transition-colors"
                title={t('common.close')}
              >
                <FiX size={24} />
              </button>


              <PayEmbed {...payEmbedProps} />
            </div>
          </div>
        </div>
      )}
    </>
  );
}


export type { ClaimStarNFTButtonProps };