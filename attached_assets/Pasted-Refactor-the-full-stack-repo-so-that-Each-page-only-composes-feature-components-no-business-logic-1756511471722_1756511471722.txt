Refactor the full-stack repo so that:

Each page only composes feature components (no business logic in pages).

UI is split into components + *.module.css per feature/page.

Server is split by feature routes (one file per domain) and a thin index.ts bootstrapping router(s).

Page & Feature Split (Client + Admin)

Keep pages minimal: import and render components only.

For each page, create a feature folder with:

components/ — small, testable UI pieces

styles/ — one or more *.module.css files scoped to that feature

services/ — browser-side data calls (if needed)

page/ — the page entry that imports components and styles

Pages to extract (Client app)

landingpage

auth/login, auth/register, auth/welcome

dashboard (shell)

Dashboard sub-pages:

usercentre (profile, balances, claim)

referrals

learning

setting

tasks (all claimable NFTs)

memberNFT

adsNFT

myNFT

education/course

education/online

education/video

hiveword-blogs

discover

Pages to extract (Admin app)

login, overview

users, referrals, payouts, nfts, education, blogs, discover, settings

Component & CSS Rules

One responsibility per component.

Co-locate style files: Feature/styles/feature-name.module.css.

Use only imported *.module.css (or Tailwind utilities) within that feature.

No API calls inside components. If needed, create a small feature services/ wrapper and call it from the page or a hook.

Server Refactor

Split server by domain route files. Examples:

routes/auth.routes.ts

routes/users.routes.ts

routes/referrals.routes.ts

routes/rewards.routes.ts

routes/nfts.routes.ts

routes/education.routes.ts

routes/blogs.routes.ts

routes/discover.routes.ts

Keep a thin index.ts that:

loads env/config

registers common middleware (auth, cors, json, logger)

mounts each feature route (e.g., /auth, /users, /referrals, …)

starts the server

Put business logic in services/ (server side), and DB access in repositories/. Routes should call services only.

Naming & Placement Conventions

Feature path: features/<feature-name>/…

Page entry: features/<feature-name>/page/page.tsx

UI: features/<feature-name>/components/*

Styles: features/<feature-name>/styles/<feature-name>.module.css

Client services: features/<feature-name>/services/*.client.ts

Shared UI: packages/ui/* (buttons, cards, modals)

Shared types: packages/types/*

Server services: apps/server/src/services/*

Server repos: apps/server/src/repositories/*

Server routes: apps/server/src/routes/*

Server index: apps/server/src/index.ts (bootstrap only)

Acceptance Criteria

Each page renders only imported components and styles (no inline fetch/business logic).

Every feature has its own components/ and *.module.css files.

All server endpoints live in domain route files; index.ts only wires them up.

Lint passes; no circular deps; imports use feature-local paths or shared packages/*.

Deliverables

Refactored folder structure per above.

Updated import paths.

Short README section describing where to add a new page, a new component, and a new route.