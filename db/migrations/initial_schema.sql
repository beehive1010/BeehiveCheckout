-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admin_actions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  admin_wallet character varying NOT NULL,
  action_type character varying NOT NULL,
  target_wallet character varying,
  action_data jsonb DEFAULT '{}'::jsonb,
  reason text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT admin_actions_pkey PRIMARY KEY (id),
  CONSTRAINT admin_actions_admin_wallet_fkey FOREIGN KEY (admin_wallet) REFERENCES public.users(wallet_address),
  CONSTRAINT admin_actions_target_wallet_fkey FOREIGN KEY (target_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.advertisement_nfts (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  title text NOT NULL,
  description text NOT NULL,
  image_url text,
  price_usdt numeric NOT NULL,
  price_bcc numeric NOT NULL,
  category text NOT NULL,
  advertiser_wallet character varying,
  click_url text,
  impressions_target integer DEFAULT 0,
  impressions_current integer DEFAULT 0,
  is_active boolean NOT NULL DEFAULT true,
  starts_at timestamp with time zone DEFAULT now(),
  ends_at timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT advertisement_nfts_pkey PRIMARY KEY (id),
  CONSTRAINT advertisement_nfts_advertiser_wallet_fkey FOREIGN KEY (advertiser_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.audit_logs (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_wallet character varying,
  action character varying NOT NULL,
  table_name character varying,
  record_id text,
  old_values jsonb,
  new_values jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_user_wallet_fkey FOREIGN KEY (user_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.bcc_purchase_orders (
  order_id character varying NOT NULL,
  buyer_wallet character varying NOT NULL,
  amount_usdc numeric NOT NULL,
  amount_bcc numeric NOT NULL,
  exchange_rate numeric NOT NULL,
  network character varying NOT NULL,
  payment_method character varying NOT NULL,
  company_wallet character varying NOT NULL,
  transaction_hash character varying,
  actual_amount_received numeric,
  bridge_used boolean NOT NULL DEFAULT false,
  status character varying NOT NULL DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'expired'::character varying, 'failed'::character varying]::text[])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone NOT NULL,
  completed_at timestamp with time zone,
  failure_reason text,
  metadata jsonb NOT NULL DEFAULT '{}'::jsonb,
  CONSTRAINT bcc_purchase_orders_pkey PRIMARY KEY (order_id),
  CONSTRAINT bcc_purchase_orders_buyer_wallet_fkey FOREIGN KEY (buyer_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.bcc_tier_config (
  phase_id integer NOT NULL,
  phase_name character varying NOT NULL,
  max_members integer NOT NULL,
  multiplier numeric NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bcc_tier_config_pkey PRIMARY KEY (phase_id)
);
CREATE TABLE public.bcc_transactions (
  transaction_id uuid NOT NULL DEFAULT gen_random_uuid(),
  wallet_address text NOT NULL,
  amount numeric NOT NULL CHECK (amount > 0::numeric),
  balance_type character varying NOT NULL CHECK (balance_type::text = ANY (ARRAY['transferable'::character varying, 'locked_rewards'::character varying, 'locked_level'::character varying, 'locked_staking'::character varying, 'pending_activation'::character varying]::text[])),
  transaction_type character varying NOT NULL CHECK (transaction_type::text = ANY (ARRAY['transfer'::character varying, 'unlock'::character varying, 'claim'::character varying, 'purchase'::character varying, 'reward'::character varying, 'level_unlock'::character varying, 'reward_claim'::character varying, 'activation_unlock'::character varying, 'spend'::character varying]::text[])),
  purpose text,
  from_wallet text,
  to_wallet text,
  metadata jsonb DEFAULT '{}'::jsonb,
  status character varying DEFAULT 'completed'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  processed_at timestamp with time zone,
  CONSTRAINT bcc_transactions_pkey PRIMARY KEY (transaction_id)
);
CREATE TABLE public.blog_posts (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  title text NOT NULL,
  slug text NOT NULL UNIQUE,
  excerpt text NOT NULL,
  content text NOT NULL,
  author text NOT NULL,
  author_wallet character varying,
  image_url text,
  published boolean NOT NULL DEFAULT true,
  published_at timestamp with time zone NOT NULL DEFAULT now(),
  tags jsonb NOT NULL DEFAULT '[]'::jsonb,
  views integer NOT NULL DEFAULT 0,
  language character varying NOT NULL DEFAULT 'en'::character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT blog_posts_pkey PRIMARY KEY (id),
  CONSTRAINT blog_posts_author_wallet_fkey FOREIGN KEY (author_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.countdown_timers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  wallet_address character varying NOT NULL,
  timer_type character varying NOT NULL,
  title character varying NOT NULL,
  description text,
  start_time timestamp with time zone NOT NULL DEFAULT now(),
  end_time timestamp with time zone NOT NULL,
  is_active boolean DEFAULT true,
  auto_action character varying,
  auto_action_data jsonb DEFAULT '{}'::jsonb,
  completed_at timestamp with time zone,
  admin_wallet character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT countdown_timers_pkey PRIMARY KEY (id),
  CONSTRAINT countdown_timers_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.users(wallet_address),
  CONSTRAINT countdown_timers_admin_fkey FOREIGN KEY (admin_wallet) REFERENCES public.users(wallet_address),
  CONSTRAINT countdown_timers_wallet_fkey FOREIGN KEY (wallet_address) REFERENCES public.users(wallet_address),
  CONSTRAINT countdown_timers_admin_wallet_fkey FOREIGN KEY (admin_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.course_activations (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  wallet_address character varying NOT NULL,
  course_id uuid NOT NULL,
  activation_type character varying NOT NULL,
  activated_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone,
  progress_percentage numeric DEFAULT 0.00,
  completed_at timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT course_activations_pkey PRIMARY KEY (id),
  CONSTRAINT course_activations_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT course_activations_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.course_lessons (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  course_id uuid NOT NULL,
  title text NOT NULL,
  description text,
  lesson_order integer NOT NULL,
  content_type text DEFAULT 'video'::text CHECK (content_type = ANY (ARRAY['video'::text, 'text'::text, 'quiz'::text, 'assignment'::text])),
  content_url text,
  duration_minutes integer DEFAULT 0,
  is_free boolean DEFAULT false,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT course_lessons_pkey PRIMARY KEY (id),
  CONSTRAINT course_lessons_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.course_progress (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  wallet_address character varying NOT NULL,
  course_id uuid NOT NULL,
  lesson_id uuid NOT NULL,
  completed boolean NOT NULL DEFAULT false,
  time_spent_minutes integer DEFAULT 0,
  last_accessed_at timestamp with time zone NOT NULL DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT course_progress_pkey PRIMARY KEY (id),
  CONSTRAINT course_progress_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.course_lessons(id),
  CONSTRAINT course_progress_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT course_progress_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.courses (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  title text NOT NULL,
  description text NOT NULL,
  image_url text,
  price_usdt numeric NOT NULL,
  price_bcc numeric NOT NULL,
  category text NOT NULL,
  difficulty_level text DEFAULT 'beginner'::text CHECK (difficulty_level = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text])),
  duration_hours integer DEFAULT 0,
  instructor_name text,
  instructor_wallet character varying,
  is_active boolean NOT NULL DEFAULT true,
  required_level integer DEFAULT 1,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT courses_pkey PRIMARY KEY (id),
  CONSTRAINT courses_instructor_wallet_fkey FOREIGN KEY (instructor_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.cross_chain_transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  source_chain_id integer NOT NULL,
  target_chain_id integer,
  transaction_hash text NOT NULL,
  block_number bigint,
  from_address text NOT NULL,
  to_address text NOT NULL,
  amount numeric NOT NULL CHECK (amount > 0::numeric),
  token_address text NOT NULL,
  gas_used bigint,
  gas_price numeric,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'confirmed'::character varying, 'failed'::character varying, 'dropped'::character varying]::text[])),
  confirmations integer DEFAULT 0 CHECK (confirmations >= 0),
  required_confirmations integer DEFAULT 12 CHECK (required_confirmations > 0),
  transaction_type character varying NOT NULL CHECK (transaction_type::text = ANY (ARRAY['withdrawal'::character varying, 'bridge'::character varying, 'transfer'::character varying, 'deposit'::character varying]::text[])),
  withdrawal_request_id text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  confirmed_at timestamp with time zone,
  CONSTRAINT cross_chain_transactions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.layer_rewards (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  recipient_wallet character varying NOT NULL,
  payer_wallet character varying NOT NULL,
  layer integer NOT NULL CHECK (layer >= 1 AND layer <= 19),
  reward_type text NOT NULL,
  amount_usdt numeric NOT NULL,
  amount_bcc numeric DEFAULT 0,
  source_transaction_id text,
  nft_level integer,
  is_claimed boolean NOT NULL DEFAULT false,
  claimed_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT layer_rewards_pkey PRIMARY KEY (id),
  CONSTRAINT layer_rewards_recipient_wallet_fkey FOREIGN KEY (recipient_wallet) REFERENCES public.users(wallet_address),
  CONSTRAINT layer_rewards_payer_wallet_fkey FOREIGN KEY (payer_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.layer_rules (
  layer integer NOT NULL CHECK (layer >= 1 AND layer <= 19),
  positions_per_layer integer NOT NULL,
  total_positions integer NOT NULL,
  matrix_width integer DEFAULT 3,
  requires_previous_layer boolean DEFAULT true,
  spillover_enabled boolean DEFAULT true,
  activation_delay_hours integer DEFAULT 0,
  layer_name text NOT NULL,
  description text,
  requires_direct_referrals boolean DEFAULT false,
  direct_referrals_needed integer DEFAULT 0,
  has_special_upgrade_rule boolean DEFAULT false,
  special_rule_description text,
  placement_priority ARRAY DEFAULT ARRAY['L'::text, 'M'::text, 'R'::text],
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT layer_rules_pkey PRIMARY KEY (layer)
);
CREATE TABLE public.matrix_activity_log (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  root_wallet character varying NOT NULL,
  member_wallet character varying NOT NULL,
  activity_type text NOT NULL,
  layer integer NOT NULL,
  position text NOT NULL,
  details jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT matrix_activity_log_pkey PRIMARY KEY (id),
  CONSTRAINT matrix_activity_log_root_wallet_fkey FOREIGN KEY (root_wallet) REFERENCES public.users(wallet_address),
  CONSTRAINT matrix_activity_log_member_wallet_fkey FOREIGN KEY (member_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.matrix_layer_summary (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  root_wallet character varying NOT NULL,
  layer integer NOT NULL CHECK (layer >= 1 AND layer <= 19),
  total_positions integer NOT NULL DEFAULT 0,
  filled_positions integer NOT NULL DEFAULT 0,
  active_members integer NOT NULL DEFAULT 0,
  layer_completion_rate numeric DEFAULT 0.00,
  last_updated timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT matrix_layer_summary_pkey PRIMARY KEY (id),
  CONSTRAINT matrix_layer_summary_root_wallet_fkey FOREIGN KEY (root_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.member_activation_tiers (
  tier integer NOT NULL,
  min_activation_rank integer NOT NULL,
  max_activation_rank integer NOT NULL,
  base_bcc_locked numeric NOT NULL,
  unlock_per_level numeric NOT NULL,
  tier_name character varying NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT member_activation_tiers_pkey PRIMARY KEY (tier)
);
CREATE TABLE public.member_requirements (
  wallet_address character varying NOT NULL,
  direct_referral_count integer DEFAULT 0 CHECK (direct_referral_count >= 0),
  can_purchase_level_2 boolean DEFAULT false,
  last_updated timestamp with time zone DEFAULT now(),
  CONSTRAINT member_requirements_pkey PRIMARY KEY (wallet_address),
  CONSTRAINT member_requirements_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.members(wallet_address)
);
CREATE TABLE public.members (
  wallet_address character varying NOT NULL,
  is_activated boolean NOT NULL DEFAULT false,
  activated_at timestamp with time zone,
  current_level integer NOT NULL DEFAULT 0,
  max_layer integer NOT NULL DEFAULT 19,
  levels_owned jsonb NOT NULL DEFAULT '[]'::jsonb,
  has_pending_rewards boolean NOT NULL DEFAULT false,
  upgrade_reminder_enabled boolean NOT NULL DEFAULT false,
  last_upgrade_at timestamp with time zone,
  last_reward_claim_at timestamp with time zone,
  total_direct_referrals integer NOT NULL DEFAULT 0,
  total_team_size integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  pending_activation_hours integer DEFAULT 0,
  activation_expires_at timestamp with time zone,
  admin_set_pending boolean DEFAULT false,
  admin_wallet character varying,
  activation_rank integer,
  bcc_locked_initial numeric DEFAULT 0,
  bcc_locked_remaining numeric DEFAULT 0,
  tier_level integer,
  CONSTRAINT members_pkey PRIMARY KEY (wallet_address),
  CONSTRAINT members_tier_level_fkey FOREIGN KEY (tier_level) REFERENCES public.member_activation_tiers(tier),
  CONSTRAINT members_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.merchant_nfts (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  title text NOT NULL,
  description text NOT NULL,
  image_url text,
  price_usdt numeric NOT NULL,
  price_bcc numeric NOT NULL,
  category text NOT NULL,
  supply_total integer,
  supply_available integer,
  is_active boolean NOT NULL DEFAULT true,
  creator_wallet character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT merchant_nfts_pkey PRIMARY KEY (id),
  CONSTRAINT merchant_nfts_creator_wallet_fkey FOREIGN KEY (creator_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.nft_levels (
  level integer NOT NULL CHECK (level >= 1 AND level <= 19),
  token_id integer NOT NULL UNIQUE,
  level_name text NOT NULL,
  price_usdc numeric NOT NULL,
  bcc_reward numeric NOT NULL,
  unlock_layer integer NOT NULL CHECK (unlock_layer >= 1 AND unlock_layer <= 19),
  required_previous_level boolean DEFAULT true,
  max_supply integer,
  current_supply integer DEFAULT 0,
  benefits jsonb DEFAULT '[]'::jsonb,
  metadata_uri text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT nft_levels_pkey PRIMARY KEY (level),
  CONSTRAINT nft_levels_unlock_layer_fkey FOREIGN KEY (unlock_layer) REFERENCES public.layer_rules(layer)
);
CREATE TABLE public.nft_purchases (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  buyer_wallet character varying NOT NULL,
  nft_id uuid NOT NULL,
  nft_type text NOT NULL,
  price_usdt numeric NOT NULL,
  price_bcc numeric DEFAULT 0,
  payment_method character varying NOT NULL,
  transaction_hash character varying,
  status character varying NOT NULL DEFAULT 'completed'::character varying,
  purchased_at timestamp with time zone NOT NULL DEFAULT now(),
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT nft_purchases_pkey PRIMARY KEY (id),
  CONSTRAINT nft_purchases_buyer_wallet_fkey FOREIGN KEY (buyer_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.orders (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  wallet_address character varying NOT NULL,
  order_type character varying NOT NULL,
  item_id text NOT NULL,
  amount_usdt numeric NOT NULL,
  amount_bcc numeric DEFAULT 0,
  payment_method character varying NOT NULL,
  status character varying NOT NULL DEFAULT 'pending'::character varying,
  transaction_hash character varying,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  completed_at timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT orders_pkey PRIMARY KEY (id),
  CONSTRAINT orders_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.platform_fees (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  fee_type character varying NOT NULL,
  nft_level integer,
  fee_amount_usdc numeric NOT NULL,
  fee_percentage numeric,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  applies_to text CHECK (applies_to = ANY (ARRAY['all_levels'::text, 'specific_level'::text, 'level_range'::text])),
  level_range_start integer,
  level_range_end integer,
  description text,
  CONSTRAINT platform_fees_pkey PRIMARY KEY (id),
  CONSTRAINT platform_fees_nft_level_fkey FOREIGN KEY (nft_level) REFERENCES public.nft_levels(level)
);
CREATE TABLE public.referral_links (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  referrer_wallet character varying NOT NULL,
  referral_token character varying NOT NULL UNIQUE,
  referral_url text NOT NULL,
  claimed_by_wallets jsonb DEFAULT '[]'::jsonb,
  total_clicks integer DEFAULT 0,
  total_registrations integer DEFAULT 0,
  total_activations integer DEFAULT 0,
  expires_at timestamp with time zone,
  max_uses integer,
  is_active boolean DEFAULT true,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT referral_links_pkey PRIMARY KEY (id),
  CONSTRAINT referral_links_referrer_fkey FOREIGN KEY (referrer_wallet) REFERENCES public.users(wallet_address),
  CONSTRAINT referral_links_referrer_wallet_fkey FOREIGN KEY (referrer_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.referrals (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  root_wallet character varying NOT NULL,
  member_wallet character varying NOT NULL,
  layer integer NOT NULL CHECK (layer >= 1 AND layer <= 19),
  position text NOT NULL,
  parent_wallet character varying,
  placer_wallet character varying NOT NULL,
  placement_type text NOT NULL CHECK (placement_type = ANY (ARRAY['direct'::text, 'spillover'::text])),
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT referrals_pkey PRIMARY KEY (id),
  CONSTRAINT referrals_parent_wallet_fkey FOREIGN KEY (parent_wallet) REFERENCES public.users(wallet_address),
  CONSTRAINT referrals_root_wallet_fkey FOREIGN KEY (root_wallet) REFERENCES public.users(wallet_address),
  CONSTRAINT referrals_member_wallet_fkey FOREIGN KEY (member_wallet) REFERENCES public.users(wallet_address),
  CONSTRAINT referrals_placer_wallet_fkey FOREIGN KEY (placer_wallet) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.reward_claims (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  root_wallet character varying NOT NULL,
  triggering_member_wallet character varying NOT NULL,
  layer integer NOT NULL CHECK (layer >= 1 AND layer <= 19),
  nft_level integer NOT NULL CHECK (nft_level >= 1 AND nft_level <= 19),
  reward_amount_usdc numeric NOT NULL,
  status text NOT NULL CHECK (status = ANY (ARRAY['pending'::text, 'claimable'::text, 'claimed'::text, 'expired'::text, 'rolled_up'::text])),
  created_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone NOT NULL,
  claimed_at timestamp with time zone,
  rolled_up_at timestamp with time zone,
  rolled_up_to_wallet character varying,
  triggering_transaction_hash character varying,
  claim_transaction_hash character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT reward_claims_pkey PRIMARY KEY (id),
  CONSTRAINT reward_claims_triggering_member_wallet_fkey FOREIGN KEY (triggering_member_wallet) REFERENCES public.members(wallet_address),
  CONSTRAINT reward_claims_rolled_up_to_wallet_fkey FOREIGN KEY (rolled_up_to_wallet) REFERENCES public.members(wallet_address),
  CONSTRAINT reward_claims_root_wallet_fkey FOREIGN KEY (root_wallet) REFERENCES public.members(wallet_address)
);
CREATE TABLE public.reward_notifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  wallet_address character varying NOT NULL,
  reward_claim_id uuid NOT NULL,
  notification_type text NOT NULL CHECK (notification_type = ANY (ARRAY['pending_reward'::text, 'expiring_soon'::text, 'expired'::text, 'claimed'::text])),
  title text NOT NULL,
  message text NOT NULL,
  countdown_hours integer,
  is_read boolean DEFAULT false,
  is_sent boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  sent_at timestamp with time zone,
  read_at timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT reward_notifications_pkey PRIMARY KEY (id),
  CONSTRAINT reward_notifications_reward_claim_id_fkey FOREIGN KEY (reward_claim_id) REFERENCES public.reward_claims(id),
  CONSTRAINT reward_notifications_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.members(wallet_address)
);
CREATE TABLE public.reward_rules (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  rule_type text NOT NULL CHECK (rule_type = ANY (ARRAY['direct_referral'::text, 'matrix_placement'::text, 'layer_reward'::text, 'upgrade_bonus'::text, 'spillover_reward'::text])),
  layer integer CHECK (layer >= 1 AND layer <= 19),
  nft_level integer CHECK (nft_level >= 1 AND nft_level <= 19),
  reward_percentage numeric,
  fixed_amount_usdc numeric,
  bcc_multiplier numeric DEFAULT 1.0000,
  requires_activation boolean DEFAULT true,
  max_claims_per_user integer,
  claim_window_hours integer,
  auto_claim boolean DEFAULT false,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reward_rules_pkey PRIMARY KEY (id)
);
CREATE TABLE public.server_wallet_balances (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  chain_id integer NOT NULL,
  chain_name character varying NOT NULL,
  token_address text NOT NULL,
  token_symbol character varying NOT NULL,
  balance numeric NOT NULL DEFAULT 0 CHECK (balance >= 0::numeric),
  decimals integer NOT NULL DEFAULT 6 CHECK (decimals >= 0 AND decimals <= 18),
  price_usd numeric DEFAULT 1.0,
  last_updated timestamp with time zone DEFAULT now(),
  is_operational boolean DEFAULT true,
  CONSTRAINT server_wallet_balances_pkey PRIMARY KEY (id)
);
CREATE TABLE public.server_wallet_operations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  operation_type character varying NOT NULL CHECK (operation_type::text = ANY (ARRAY['balance_check'::character varying, 'transfer'::character varying, 'withdrawal'::character varying, 'deposit'::character varying, 'gas_estimation'::character varying]::text[])),
  chain_id integer NOT NULL,
  wallet_address text NOT NULL,
  amount numeric,
  token_address text,
  transaction_hash text,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'completed'::character varying, 'failed'::character varying]::text[])),
  error_message text,
  gas_used bigint,
  gas_fee_usd numeric,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT server_wallet_operations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.system_settings (
  key character varying NOT NULL,
  value jsonb NOT NULL,
  description text,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_by character varying,
  CONSTRAINT system_settings_pkey PRIMARY KEY (key),
  CONSTRAINT system_settings_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.usdt_withdrawals (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  wallet_address character varying NOT NULL,
  amount numeric NOT NULL,
  withdrawal_address character varying NOT NULL,
  network character varying NOT NULL,
  status character varying NOT NULL DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying]::text[])),
  transaction_hash character varying,
  fee_amount numeric DEFAULT 0,
  requested_at timestamp with time zone NOT NULL DEFAULT now(),
  processed_at timestamp with time zone,
  failure_reason text,
  CONSTRAINT usdt_withdrawals_pkey PRIMARY KEY (id),
  CONSTRAINT usdt_withdrawals_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.user_balances (
  wallet_address character varying NOT NULL,
  bcc_transferable numeric NOT NULL DEFAULT 0,
  bcc_locked numeric NOT NULL DEFAULT 0,
  total_usdc_earned numeric NOT NULL DEFAULT 0,
  pending_upgrade_rewards numeric NOT NULL DEFAULT 0,
  rewards_claimed numeric NOT NULL DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  bcc_locked_total numeric DEFAULT 10450.0000,
  bcc_unlocked_balance numeric DEFAULT 0,
  pending_reward_balance_usdc numeric DEFAULT 0.00,
  claimable_reward_balance_usdc numeric DEFAULT 0.00,
  total_rewards_withdrawn_usdc numeric DEFAULT 0.00,
  bcc_earned_rewards numeric DEFAULT 0,
  bcc_pending_activation numeric DEFAULT 0,
  bcc_locked_staking numeric DEFAULT 0,
  tier_phase integer DEFAULT 1,
  unlock_tier_multiplier numeric DEFAULT 1.0,
  CONSTRAINT user_balances_pkey PRIMARY KEY (wallet_address),
  CONSTRAINT user_balances_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.user_notifications (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  wallet_address character varying NOT NULL,
  title text NOT NULL,
  message text NOT NULL,
  type character varying NOT NULL,
  is_read boolean NOT NULL DEFAULT false,
  action_url text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  read_at timestamp with time zone,
  CONSTRAINT user_notifications_pkey PRIMARY KEY (id),
  CONSTRAINT user_notifications_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.user_wallet_connections (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  wallet_address character varying NOT NULL,
  connection_type character varying NOT NULL,
  ip_address inet,
  user_agent text,
  connected_at timestamp with time zone NOT NULL DEFAULT now(),
  disconnected_at timestamp with time zone,
  session_duration integer,
  CONSTRAINT user_wallet_connections_pkey PRIMARY KEY (id),
  CONSTRAINT user_wallet_connections_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES public.users(wallet_address)
);
CREATE TABLE public.user_withdrawal_limits (
  user_wallet text NOT NULL,
  daily_limit_usd numeric DEFAULT 1000 CHECK (daily_limit_usd >= 0::numeric),
  monthly_limit_usd numeric DEFAULT 10000 CHECK (monthly_limit_usd >= 0::numeric),
  daily_withdrawn_usd numeric DEFAULT 0 CHECK (daily_withdrawn_usd >= 0::numeric),
  monthly_withdrawn_usd numeric DEFAULT 0 CHECK (monthly_withdrawn_usd >= 0::numeric),
  last_withdrawal timestamp with time zone,
  daily_reset_date date DEFAULT CURRENT_DATE,
  monthly_reset_date date DEFAULT date_trunc('month'::text, (CURRENT_DATE)::timestamp with time zone),
  is_whitelisted boolean DEFAULT false,
  security_level integer DEFAULT 1 CHECK (security_level >= 1 AND security_level <= 3),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_withdrawal_limits_pkey PRIMARY KEY (user_wallet)
);
CREATE TABLE public.users (
  wallet_address character varying NOT NULL,
  referrer_wallet character varying,
  username text UNIQUE,
  email text,
  is_upgraded boolean NOT NULL DEFAULT false,
  upgrade_timer_enabled boolean NOT NULL DEFAULT false,
  current_level integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  is_admin boolean DEFAULT false,
  auth_user_id uuid,
  email_verified boolean DEFAULT false,
  phone_verified boolean DEFAULT false,
  CONSTRAINT users_pkey PRIMARY KEY (wallet_address),
  CONSTRAINT fk_users_referrer FOREIGN KEY (referrer_wallet) REFERENCES public.users(wallet_address),
  CONSTRAINT users_auth_user_id_fkey FOREIGN KEY (auth_user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.withdrawal_requests (
  id text NOT NULL,
  user_wallet text NOT NULL,
  amount numeric NOT NULL CHECK (amount > 0::numeric),
  target_chain_id integer NOT NULL,
  token_address text NOT NULL,
  user_signature text NOT NULL,
  transaction_hash text,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])),
  metadata jsonb DEFAULT '{}'::jsonb,
  gas_fee_usd numeric,
  estimated_completion timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT withdrawal_requests_pkey PRIMARY KEY (id)
);